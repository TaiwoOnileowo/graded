generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String
  hashedPassword String
  role           Role      @default(STUDENT)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lecturer       Lecturer?
  student        Student?
}

model Student {
  id           String       @id @default(cuid())
  userId       String       @unique
  level        Int
  major        String
  matricNumber String       @unique
  enrollments  Enrollment[]
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissions  Submission[]
}

model Lecturer {
  id         String   @id @default(cuid())
  userId     String   @unique
  bio        String?
  department String
  title      String?
  courses    Course[]
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id          String       @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  password    String?
  updatedAt   DateTime     @updatedAt
  lecturerId  String
  isPublished Boolean      @default(true)
  code        String
  assignments Assignment[]
  lecturer    Lecturer     @relation(fields: [lecturerId], references: [id])
  enrollments Enrollment[]
}

model Assignment {
  id               String       @id @default(cuid())
  title            String
  description      String?
  marks            Int
  deadline         DateTime?
  timeLimit        Int?         // Time limit in minutes
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  courseId         String
  codeTemplate     String?
  expectedSolution String?
  hint             String?
  isPublished      Boolean      @default(true)
  questionText     String?
  course           Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  rubrics          RubricItem[]
  submissions      Submission[]
  testCases        TestCase[]
}

model RubricItem {
  id           String             @id @default(cuid())
  title        String
  description  String?
  maxPoints    Int
  assignmentId String
  evaluations  RubricEvaluation[]
  assignment   Assignment         @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
}

model TestCase {
  id             String     @id @default(cuid())
  input          String
  expectedOutput String
  description    String?
  assignmentId   String
  assignment     Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  studentId String
  courseId  String
  status    EnrollmentStatus @default(ENROLLED)
  course    Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student   Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
}

model TestResult {
  id String @id @default(cuid())
  name String
  passed Boolean
  message String
  submissionId String
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}
model Submission {
  id                String             @id @default(cuid())
  content           String?
  fileUrl           String?
  submittedAt       DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  studentId         String
  assignmentId      String
  feedback          String?
  gradedAt          DateTime?
  autoGrade         Float?
  finalGrade        Float?
  gradedBy          String?
  testsPassed       Int?
  testResults       TestResult[]
  lecturerFeedback  String?
  generalFeedback   String?
  testsTotal        Int?
  timeSpent         Int?
  rubricEvaluations RubricEvaluation[]
  assignment        Assignment         @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student           Student            @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, assignmentId])
}

model RubricEvaluation {
  id           String     @id @default(cuid())
  points       Float
  comment      String?
  rubricItemId String
  submissionId String
  rubricItem   RubricItem @relation(fields: [rubricItemId], references: [id], onDelete: Cascade)
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([rubricItemId, submissionId])
}

enum Role {
  STUDENT
  LECTURER
  ADMIN
}

enum EnrollmentStatus {
  ENROLLED
  COMPLETED
  DROPPED
}
